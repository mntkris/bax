\echo *** SIMPLE SCALAR ALTERS
BEGIN;
CALL def_scalartypes(
  ScalarType('test', 'IntType', 'INT', initial => $INI$123$INI$),
  ScalarType('test', 'TextType', 'TEXT', initial => $INI$'abcde'$INI$)
);
-- select * from scalartypes;
WITH test AS (
SELECT (ddl()).alters AS result,
$EXPECTED$ALTER DOMAIN test.IntType SET DEFAULT 123;

ALTER DOMAIN test.TextType SET DEFAULT 'abcde';$EXPECTED$ AS expected)
SELECT result, expected, not equals(result, expected) error FROM test
\gset
\if :error
  \echo '--- RESULT --->'
  \echo :result
  \echo '--- EXPECTED --->'
  \echo :expected
\endif
ROLLBACK;

\echo *** SIMPLE COMPOSITE ALTERS 
BEGIN;
CALL def_scalartypes(
  ScalarType(
    'test', 'Text', 'TEXT',
    initial => $INI$'abc'$INI$
  ),
  ScalarType(
    'test', 'Number', 'INT',
    props => arr(
      Prop('threeciphers', 'BOOL', $EXPR$self BETWEEN 100 AND 199$EXPR$)
    )
  )
);
CALL def_compositetypes(
  CompositeType(
    'test', 'Compo1',
    fields => arr(
      Scalar(
        105, 'txt1', 'Text'
      ),
      Scalar(
        110, 'num1', 'Number',
        props => arr(
          Prop('oneoneany', 'BOOL', $EXPR$self BETWEEN 110 AND 119 $EXPR$)
        )
      )
    ),
    props => arr(
      Prop('repr', 'TEXT', $EXPR$FORMAT('Compo1(txt1: %s, num1: %s'), self.txt1, self.num1)$EXPR$)
    )    
  ),
  CompositeType(
    'test', 'Compo21',
    fields => arr(
      Scalar(
        105, 'txt1', 'Text',
        initial => $INI$'xyz'$INI$
      ),
      Composite(
        110, 'compo1', 'Compo1',
        initial => $INI$Compo1('fgh', '567')$INI$
      )
    )
  ),
  CompositeType(
    'test', 'Compo22',
    fields => arr(
      Scalar(
        105, 'num1', 'Number'
      ),
      Composite(
        110, 'compo1', 'Compo1'
      ),
      Inline(
        115, 'Compo1', 
        prefix => 'compo1_'
      )
    )
  )
);
WITH test AS (
SELECT (ddl()).alters AS result,
'FILL ME' AS expected)
SELECT result, expected, not equals(result, expected) error FROM test
\gset
\if :error
  \echo '--- RESULT --->'
  \echo :result
  \echo '--- EXPECTED --->'
  \echo :expected
\endif

--select kind, parenttype, id, name, type, ispk, initial, f_initial, t_initial from ddlfieldsmv order by parenttype, id;
--select kind, parenttype, id, name, type, ispk, initial from ddlfields order by parenttype, id;

ROLLBACK;
