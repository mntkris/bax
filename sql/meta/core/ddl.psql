-- WIP
--set search_path to meta;

--drop table if exists ddlfields cascade;
--drop procedure if exists fillddlfields;
CREATE TABLE ddlfields (
  kind FieldKind,
  parenttype Ident,
  id TEXT,
  name Ident,
  type Type,
  ispk BOOL DEFAULT FALSE,
  desttable Ident DEFAULT NULL,
  destfield Ident DEFAULT NULL,
  cascade BOOL DEFAULT NULL,
  UNIQUE (parenttype, id),
  PRIMARY KEY (parenttype, name)
);

CREATE PROCEDURE fillddlfields() AS $BODY$
#variable_conflict use_variable
DECLARE
  tpe types%ROWTYPE;
BEGIN
  FOR tpe IN SELECT * FROM compositetypes ORDER BY serial LOOP
	
    INSERT INTO ddlfields(kind, parenttype, id, name, type, ispk)
    SELECT sf.kind, sf.ownertype, sf.id::TEXT, sf.name, sf.type, 
      COALESCE(tpe.kind = 'table' AND sf.name=ANY(t.pk), FALSE)
    FROM scalarfields sf
    LEFT JOIN tables t ON t.name = sf.ownertype
    WHERE sf.ownertype = tpe.name;

    INSERT INTO ddlfields(kind, parenttype, id, name, type)
    SELECT kind, ownertype, id::TEXT, name, type
    FROM compositefields 
    WHERE ownertype = tpe.name AND inlineprefix IS NULL;

    INSERT INTO ddlfields(kind, parenttype, id, name, type)
    SELECT tf.kind, cf.ownertype, cf.id || '-' || tf.id, 
      cf.inlineprefix || tf.name, tf.type
    FROM compositefields cf
    JOIN ddlfields tf ON cf.type = tf.parenttype
    WHERE cf.ownertype = tpe.name AND cf.inlineprefix IS NOT NULL;

    INSERT INTO ddlfields(
      kind, parenttype, id, name, type, desttable, destfield, cascade)
    SELECT r.kind, r.ownertype, r.id || '-' || sf.id, pkfname, sf.type, 
      r.destination, pkfname, r.cascade
    FROM refnfields r
    JOIN tables t ON r.destination = t.name,
    UNNEST(t.pk) pkfname
    JOIN scalarfields sf ON sf.name = pkfname
    WHERE r.ownertype = tpe.name AND r.names IS NULL AND sf.ownertype = t.name;

    INSERT INTO ddlfields(
      kind, parenttype, id, name, type, desttable, destfield, cascade)
    SELECT r.kind, r.ownertype, r.id || '-' || sf.id, fk.newname, sf.type,
      r.destination, fk.name, r.cascade 
    FROM refnfields r
    JOIN tables t ON r.destination = t.name, 
    UNNEST(r.names, t.pk) AS fk(newname, name)
    JOIN scalarfields sf ON sf.name = fk.name 
    WHERE r.ownertype = tpe.name AND r.names IS NOT NULL AND sf.ownertype = t.name;
  
  END LOOP;	
END
$BODY$ LANGUAGE PLPGSQL;
--call fillddlfields();
--select * from ddlfields order by 2,3;

CREATE FUNCTION astext(ns Namespace) RETURNS TEXT AS $BODY$
  SELECT CASE CARDINALITY(ns)
    WHEN 0 THEN ''
    WHEN 1 THEN ns[1] || '.'
    ELSE ns[1] || '.' || ARRAY_TO_STRING(ns[2:], '_') || '_'
  END;
$BODY$ LANGUAGE SQL IMMUTABLE;
--select (('aa-bb-cc').arr).astext;

CREATE FUNCTION schema(ns Namespace) RETURNS TEXT AS $BODY$
  SELECT CASE CARDINALITY(ns)
    WHEN 0 THEN ''
    ELSE ns[1] || '.'
  END;
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE FUNCTION ddlcreate(scalar scalartypes) RETURNS TEXT AS $BODY$
#variable_conflict use_variable
BEGIN
  RETURN FORMAT(
    $DDL$CREATE DOMAIN %s%s AS %s;$DDL$,
    (scalar.ns).astext, scalar.name, scalar.pgtype);
END
$BODY$ LANGUAGE PLPGSQL IMMUTABLE;

CREATE FUNCTION ddlcreate(field ddlfields) RETURNS TEXT AS $BODY$
#variable_conflict use_variable
BEGIN
  RETURN FORMAT($DDL$  %s %s$DDL$, field.name, field.type);
END
$BODY$ LANGUAGE PLPGSQL IMMUTABLE;
--select (f).ddlcreate from ddlfields f;

CREATE FUNCTION ddlcreate(tpe types) RETURNS TEXT AS $BODY$
#variable_conflict use_variable
DECLARE
  fields TEXT;
BEGIN
  SELECT STRING_AGG((f).ddlcreate, E',\n' ORDER BY f.id) INTO fields
  FROM ddlfields f WHERE f.parenttype = tpe.name;
 
  IF tpe.kind = 'composite' THEN
    RETURN FORMAT(E'CREATE TYPE %s%s AS (\n%s\n);', 
                  (tpe.ns).astext, tpe.name, fields);
  END IF;
  IF tpe.kind = 'table' THEN
    RETURN FORMAT(E'CREATE TABLE %s%s (\n%s\n);',
                  (tpe.ns).astext, tpe.name, fields);
  END IF;
END
$BODY$ LANGUAGE PLPGSQL IMMUTABLE;
--select (t).ddlcreate from compositetypes t order by serial;


CREATE FUNCTION ddlcreate() RETURNS TEXT AS $BODY$
#variable_conflict use_variable
DECLARE
  scalars TEXT;
BEGIN
  SELECT STRING_AGG((s).ddlcreate, E'\n' ORDER BY s.serial) INTO scalars
  FROM scalartypes s;

  RETURN scalars;
END
$BODY$ LANGUAGE PLPGSQL;
