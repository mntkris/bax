-- WIP
set search_path to meta;

drop table if exists ddlfields;
CREATE TABLE ddlfields (
  kind FieldKind,
  parent Ident,
  id TEXT,
  name Ident,
  type Type,
  ispk BOOL DEFAULT FALSE,
  desttable Ident DEFAULT NULL,
  destfield Ident DEFAULT NULL,
  cascade BOOL DEFAULT NULL,
  UNIQUE (parent, id),
  UNIQUE (parent, name)
);

do $$
DECLARE
  tpe types%ROWTYPE;
BEGIN
  FOR tpe IN
  	SELECT * FROM types 
  	WHERE kind IN ('composite', 'table')
  	ORDER BY serial
  LOOP
	
	INSERT INTO ddlfields(kind, parent, id, name, type, ispk)
	SELECT sf.kind, sf.owner, sf.id::TEXT, sf.name, sf.type, COALESCE(tpe.kind = 'table' AND sf.name=ANY(t.pk), FALSE)
	FROM scalarfields sf
	LEFT JOIN tables t ON t.name = sf.owner
	WHERE sf.owner = tpe.name;

	INSERT INTO ddlfields(kind, parent, id, name, type)
	SELECT kind, owner, id::TEXT, name, type
	FROM compositefields WHERE owner = tpe.name AND inlineprefix IS NULL;
	
	INSERT INTO ddlfields(kind, parent, id, name, type)
	SELECT tf.kind, cf.owner, cf.id || '-' || tf.id, cf.inlineprefix || tf.name, tf.type
	FROM compositefields cf
	JOIN ddlfields tf ON cf.type = tf.parent
	WHERE cf.owner = tpe.name AND cf.inlineprefix IS NOT NULL;
	
	INSERT INTO ddlfields(kind, parent, id, name, type, desttable, destfield, cascade)
    SELECT r.kind, r.owner, r.id || '-' || sf.id, pkfname, sf.type, r.destination, pkfname, r.cascade
    FROM refnfields r
    JOIN tables t ON r.destination = t.name,
    UNNEST(t.pk) pkfname
    JOIN scalarfields sf ON sf.name = pkfname
    WHERE r.owner = tpe.name AND r.names IS NULL AND sf.owner = t.name;
	
	INSERT INTO ddlfields(kind, parent, id, name, type, desttable, destfield, cascade)
	SELECT r.kind, r.owner, r.id || '-' || sf.id, fk.newname, sf.type, r.destination, fk.name, r.cascade 
	FROM refnfields r
	JOIN tables t ON r.destination = t.name, 
	UNNEST(r.names, t.pk) AS fk(newname, name)
	JOIN scalarfields sf ON sf.name = fk.name 
	WHERE r.owner = tpe.name AND r.names IS NOT NULL AND sf.owner = t.name;
  
  END LOOP;	
END $$;



select * from ddlfields order by 2,3;

