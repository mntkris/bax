-- 
-- constraint
--
-- props

CREATE TYPE TypeKind AS ENUM ('scalar', 'enum', 'composite', 'table');

CREATE TABLE types (
  serial SERIAL,
  kind TypeKind NOT NULL,
  ns Namespace,
  name Ident PRIMARY KEY
);

CREATE TABLE scalartypes (
  kind TypeKind NOT NULL DEFAULT 'scalar',
  name Ident PRIMARY KEY,
  pgtype PgType NOT NULL
) INHERITS (types);

CREATE TABLE enumtypes (
  kind TypeKind NOT NULL DEFAULT 'enum',
  values TEXT[]
) INHERITS (scalartypes);

-- todo range

CREATE TABLE compositetypes (
  kind TypeKind NOT NULL DEFAULT 'composite',
  name Ident PRIMARY KEY
) INHERITS (types);

CREATE TABLE tables (
  kind TypeKind NOT NULL DEFAULT 'table',
  name Ident PRIMARY KEY,
  pk Ident[]
) INHERITS (compositetypes);

--

CREATE TYPE FieldKind AS ENUM ('scalar', 'composite', 'refn', 'ref1');
CREATE FUNCTION fieldkind(s TEXT) RETURNS FieldKind AS $BODY$
  SELECT s::FieldKind;
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE TABLE fields (
  serial SERIAL,
  kind FieldKind NOT NULL, 
  owner Ident NOT NULL REFERENCES compositetypes(name),
  id INT NOT NULL,
  name Ident NOT NULL,
  description Description
);

CREATE TABLE scalarfields (
  kind FieldKind NOT NULL DEFAULT 'scalar',
  type Type NOT NULL REFERENCES scalartypes(name),
  UNIQUE (owner, id)
) INHERITS (fields);

CREATE TABLE compositefields (
  kind FieldKind NOT NULL DEFAULT 'composite',
  type Type NOT NULL REFERENCES compositetypes(name),
  inlineprefix TEXT, -- gdy false to nie rozwijane
  UNIQUE (owner, id)
) INHERITS (fields);

CREATE TABLE refnfields (
  kind FieldKind NOT NULL DEFAULT 'refn',
  destination Ident NOT NULL REFERENCES tables(name),
  cascade BOOL DEFAULT FALSE,
  names Ident[],
  UNIQUE (owner, id)
) INHERITS (fields);

CREATE TABLE ref1fields (
  kind FieldKind NOT NULL DEFAULT 'ref1',
  UNIQUE (owner, id)
) INHERITS (refnfields);

-- ============================================================

CREATE TYPE ScalarExt_T AS (
  type Ident
);
CREATE DOMAIN ScalarExt AS ScalarExt_T
  CONSTRAINT notempty CHECK (
    (VALUE).type.notempty);
CREATE FUNCTION ScalarExt (
  type Type
) RETURNS ScalarExt AS $BODY$
  SELECT ROW(type)::ScalarExt;
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE TYPE CompositeExt_T AS (
  type Type,
  inlineprefix TEXT
);
CREATE DOMAIN CompositeExt AS CompositeExt_T
  CONSTRAINT notempty CHECK (
    (VALUE).type.notempty);
CREATE FUNCTION CompositeExt (
  type Ident,
  inlineprefix TEXT DEFAULT NULL
) RETURNS CompositeExt AS $BODY$
  SELECT ROW(type, inlineprefix)::CompositeExt;
$BODY$ LANGUAGE SQL IMMUTABLE;

-- TODO ?reeng zrobic typ 'bazowy' Ref?
CREATE TYPE RefNExt_T AS (
  destination Ident,
  cascade BOOL,
  names Ident[]
);
CREATE DOMAIN RefNExt AS RefNExt_T
  CONSTRAINT notempty CHECK (
    (VALUE).destination.notempty AND
    (VALUE).cascade.notempty);
CREATE FUNCTION RefNExt (
  destination Ident,
  cascade BOOL DEFAULT FALSE,
  names Ident[] DEFAULT ARRAY[]::Ident[]
) RETURNS RefNExt AS $BODY$
  SELECT ROW(destination, cascade, names)::RefNExt;
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE TYPE Ref1Ext_T AS (
  destination Ident,
  cascade BOOL,
  names Ident[]
);
CREATE DOMAIN Ref1Ext AS Ref1Ext_T
  CONSTRAINT notempty CHECK (
    (VALUE).destination.notempty AND
    (VALUE).cascade.notempty);
CREATE FUNCTION Ref1Ext (
  destination Ident,
  cascade BOOL DEFAULT FALSE,
  names Ident[] DEFAULT ARRAY[]::Ident[]
) RETURNS Ref1Ext AS $BODY$
  SELECT (destination, cascade, names)::Ref1Ext;
$BODY$ LANGUAGE SQL IMMUTABLE;


CREATE TYPE Field_T AS (
  id INT,
  name Ident,
  description Description,
  scalarext ScalarExt,
  compositeext CompositeExt,
  refnext RefNExt,
  ref1ext Ref1Ext
);
CREATE DOMAIN Field AS Field_T
  CONSTRAINT exactlyone CHECK (
    truecount(ARRAY[
      (VALUE).scalarext.notnull,
      (VALUE).compositeext.notnull,
      (VALUE).refnext.notnull,
      (VALUE).ref1ext.notnull
    ]) = 1)
  CONSTRAINT notempty CHECK (
    (VALUE).id.notempty AND
    (VALUE).name.notempty);
CREATE FUNCTION Field (
  id INT,
  name Ident,
  description Description DEFAULT NULL,
  scalarext ScalarExt DEFAULT NULL,
  compositeext CompositeExt DEFAULT NULL,
  refnext RefNExt DEFAULT NULL,
  ref1ext Ref1Ext DEFAULT NULL
) RETURNS Field AS $BODY$
  SELECT (
    id, name, description, 
    scalarext, compositeext, refnext, ref1ext
  )::Field;
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE FUNCTION Scalar(
  id INT,
  name Ident,
  type Type,
  description Description DEFAULT NULL
) RETURNS Field AS $BODY$
  SELECT Field(id, name, description, scalarext => ScalarExt(type => type));
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE FUNCTION Composite(
  id INT,
  name Ident,
  type Type,
  description Description DEFAULT NULL
) RETURNS Field AS $BODY$
  SELECT Field(id, name, description, compositeext => CompositeExt(type => type));
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE FUNCTION Inline(
  id INT,
  type Type,
  prefix TEXT DEFAULT NULL,
  description Description DEFAULT NULL
) RETURNS Field AS $BODY$
  SELECT Field(id, 'inline_' || id, description, compositeext => CompositeExt(
    type => type, inlineprefix => prefix));
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE FUNCTION RefN(
  id INT,
  destination Ident,
  cascade BOOL DEFAULT FALSE,
  names Text DEFAULT NULL,
  description Description DEFAULT NULL
) RETURNS Field AS $BODY$
  SELECT Field(id, 'refn_' || id, description, refnext => RefNExt(
    destination => destination, cascade => cascade, names => names.arr));
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE FUNCTION Ref1(
  id INT,
  destination Ident,
  cascade BOOL DEFAULT FALSE,
  names Text DEFAULT NULL,
  description Description DEFAULT NULL
) RETURNS Field AS $BODY$
  SELECT Field(id, 'ref1_' || id, description, ref1ext => Ref1Ext(
    destination => destination, cascade => cascade, names => names.arr));
$BODY$ LANGUAGE SQL IMMUTABLE;

-- ===================================================

CREATE TYPE ScalarType_T AS (
  ns Namespace,
  name Ident,
  pgtype PgType
);
CREATE DOMAIN ScalarType AS ScalarType_T
  CONSTRAINT notempty CHECK (
    (VALUE).ns.notempty AND 
    (VALUE).name.notempty AND 
    (VALUE).pgtype.notempty);
CREATE FUNCTION ScalarType (
  ns TEXT,
  name Ident,
  pgtype PgType
) RETURNS ScalarType AS $BODY$
  SELECT ROW(ns.arr, name, pgtype)::ScalarType
$BODY$ LANGUAGE SQL IMMUTABLE;

CREATE PROCEDURE def_scalartypes(VARIADIC sts ScalarType[]) AS $BODY$
#variable_conflict use_variable
BEGIN
  INSERT INTO scalartypes(ns, name, pgtype)
  SELECT st.ns, st.name, st.pgtype FROM UNNEST(sts) st;
END
$BODY$ LANGUAGE PLPGSQL;

-- -------------------------------------------------------

CREATE TYPE CompositeType_T AS (
  ns Namespace,
  name Ident,
  fields Field[]
);
CREATE DOMAIN CompositeType AS CompositeType_T
  CONSTRAINT notempty CHECK (
    (VALUE).ns.notempty AND
    (VALUE).name.notempty AND
    (VALUE).fields.notempty);
CREATE FUNCTION CompositeType (
  ns TEXT,
  name Ident,
  VARIADIC fields Field[]
) RETURNS CompositeType AS $BODY$
  SELECT (ns.arr, name, fields)::CompositeType;
$BODY$ LANGUAGE SQL IMMUTABLE;


CREATE PROCEDURE def_compositetypes(VARIADIC cts CompositeType[]) AS $BODY$
#variable_conflict use_variable
BEGIN
  INSERT INTO compositetypes(ns, name)
  SELECT ct.ns, ct.name FROM UNNEST(cts) ct;

  INSERT INTO scalarfields(owner, id, name, description, type)
  SELECT ct.name, f.id, f.name, f.description, (f.scalarext).type
  FROM UNNEST(cts) ct, UNNEST(ct.fields) f WHERE (f.scalarext).notnull;

  INSERT INTO compositefields(owner, id, name, description, type, inlineprefix)
  SELECT ct.name, f.id, f.name, f.description, (f.compositeext).type, (f.compositeext).inlineprefix 
  FROM UNNEST(cts) ct, UNNEST(ct.fields) f WHERE (f.compositeext).notnull;

  RETURN;
END
$BODY$ LANGUAGE PLPGSQL;

-- =================================================================

CREATE TYPE GenericTable_T AS (
  ns Namespace,
  name Ident,
  pk Ident[],
  fields Field[]
);
CREATE DOMAIN GenericTable AS GenericTable_T
  CONSTRAINT notempty CHECK (
    (VALUE).ns.notempty AND
    (VALUE).name.notempty AND
    (VALUE).pk.notempty AND
    (VALUE).fields.notempty);
CREATE FUNCTION GenericTable (
  ns TEXT,
  name Ident,
  pk TEXT,
  VARIADIC fields Field[]
) RETURNS GenericTable AS $BODY$
  SELECT (ns.arr, name, pk.arr, fields)::GenericTable;
$BODY$ LANGUAGE SQL IMMUTABLE;


CREATE PROCEDURE def_tables(VARIADIC gts GenericTable[]) AS $BODY$
#variable_conflict use_variable
BEGIN
  INSERT INTO tables(ns, name, pk)
  SELECT gt.ns, gt.name, gt.pk FROM UNNEST(gts) gt;

  INSERT INTO scalarfields(owner, id, name, description, type)
  SELECT gt.name, f.id, f.name, f.description, (f.scalarext).type
  FROM UNNEST(gts) gt, UNNEST(gt.fields) f WHERE (f.scalarext).notnull;

  INSERT INTO compositefields(owner, id, name, description, type, inlineprefix)
  SELECT gt.name, f.id, f.name, f.description, (f.compositeext).type, (f.compositeext).inlineprefix 
  FROM UNNEST(gts) gt, UNNEST(gt.fields) f WHERE (f.compositeext).notnull;

  INSERT INTO refnfields(owner, id, name, description, 
                         destination, cascade, names)
  SELECT gt.name, f.id, f.name, f.description,
    (f.refnext).destination, (f.refnext).cascade, (f.refnext).names
  FROM UNNEST(gts) gt, UNNEST(gt.fields) f WHERE (f.refnext).notnull;

  INSERT INTO ref1fields(owner, id, name, description, 
                         destination, cascade, names)
  SELECT gt.name, f.id, f.name, f.description,
    (f.ref1ext).destination, (f.ref1ext).cascade, (f.ref1ext).names
  FROM UNNEST(gts) gt, UNNEST(gt.fields) f WHERE (f.ref1ext).notnull;
  
  RETURN;
END
$BODY$ LANGUAGE PLPGSQL;

